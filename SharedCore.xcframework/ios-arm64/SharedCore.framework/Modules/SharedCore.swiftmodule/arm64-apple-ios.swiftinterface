// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -O -module-name SharedCore
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import Foundation
@_exported import SharedCore
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum Skie {
  public enum RuntimeKotlin {
    public enum SkieColdFlowIterator {
      public typealias __Kotlin = SharedCore.SkieColdFlowIterator
    }
    public enum SkieKotlinFlow {
      public typealias __Kotlin = SharedCore.SkieKotlinFlow
    }
    public enum SkieKotlinMutableSharedFlow {
      public typealias __Kotlin = SharedCore.SkieKotlinMutableSharedFlow
    }
    public enum SkieKotlinMutableStateFlow {
      public typealias __Kotlin = SharedCore.SkieKotlinMutableStateFlow
    }
    public enum SkieKotlinOptionalFlow {
      public typealias __Kotlin = SharedCore.SkieKotlinOptionalFlow
    }
    public enum SkieKotlinOptionalMutableSharedFlow {
      public typealias __Kotlin = SharedCore.SkieKotlinOptionalMutableSharedFlow
    }
    public enum SkieKotlinOptionalMutableStateFlow {
      public typealias __Kotlin = SharedCore.SkieKotlinOptionalMutableStateFlow
    }
    public enum SkieKotlinOptionalSharedFlow {
      public typealias __Kotlin = SharedCore.SkieKotlinOptionalSharedFlow
    }
    public enum SkieKotlinOptionalStateFlow {
      public typealias __Kotlin = SharedCore.SkieKotlinOptionalStateFlow
    }
    public enum SkieKotlinSharedFlow {
      public typealias __Kotlin = SharedCore.SkieKotlinSharedFlow
    }
    public enum SkieKotlinStateFlow {
      public typealias __Kotlin = SharedCore.SkieKotlinStateFlow
    }
    public enum Skie_CancellationHandler {
      public typealias __Kotlin = SharedCore.Skie_CancellationHandler
    }
    public enum Skie_DispatcherDelegate {
      public typealias __Kotlin = SharedCore.Skie_DispatcherDelegate
    }
    public enum Skie_SuspendHandler {
      public typealias __Kotlin = SharedCore.Skie_SuspendHandler
    }
    public enum Skie_SuspendResult {
      public typealias __Kotlin = SharedCore.Skie_SuspendResult
      public enum Success {
        public typealias __Kotlin = SharedCore.Skie_SuspendResult.Success
      }
      public enum Error {
        public typealias __Kotlin = SharedCore.Skie_SuspendResult.Error
      }
      public enum Canceled {
        public typealias __Kotlin = SharedCore.Skie_SuspendResult.Canceled
      }
    }
  }
  public typealias co_touchlab_skie__runtime_kotlin = SharedCore.Skie.RuntimeKotlin
  public enum KotlinxCoroutinesCore {
    public enum Flow {
      public typealias __Kotlin = SharedCore.Kotlinx_coroutines_coreFlow
    }
    public enum StateFlow {
      public typealias __Kotlin = SharedCore.Kotlinx_coroutines_coreStateFlow
    }
    public enum SharedFlow {
      public typealias __Kotlin = SharedCore.Kotlinx_coroutines_coreSharedFlow
    }
    public enum MutableSharedFlow {
      public typealias __Kotlin = SharedCore.Kotlinx_coroutines_coreMutableSharedFlow
    }
    public enum MutableStateFlow {
      public typealias __Kotlin = SharedCore.Kotlinx_coroutines_coreMutableStateFlow
    }
    public enum Runnable {
      public typealias __Kotlin = SharedCore.Kotlinx_coroutines_coreRunnable
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_coroutines_core = SharedCore.Skie.KotlinxCoroutinesCore
  public enum supla_android__shared_core {
    public enum LocalizedString {
    }
    public enum SuplaClientMessage {
    }
    public enum BaseData {
    }
    public enum ChannelIssueItem {
    }
    public enum IssueIcon {
    }
    public enum AddWizardFinalAction {
    }
    public enum EspConfigurationError {
    }
    public enum EspConfigurationEvent {
    }
    public enum EspConfigurationState {
    }
    public enum ChannelDto {
    }
  }
  public typealias supla_android__shared_core_ = SharedCore.Skie.supla_android__shared_core
  public enum KotlinxSerializationCore {
    public enum SerialKind {
    }
    public enum SerializersModule {
    }
    public enum PolymorphicKind {
    }
    public enum PrimitiveKind {
    }
    public enum StructureKind {
    }
  }
  public typealias org_jetbrains_kotlinx__kotlinx_serialization_core = SharedCore.Skie.KotlinxSerializationCore
}
@_hasMissingDesignatedInitializers public class SkieSwiftFlowIterator<T> : _Concurrency.AsyncIteratorProtocol {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func next() async -> T?
  @objc deinit
  public typealias Element = T
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncIteratorProtocol, Failure) public typealias __AsyncIteratorProtocol_Failure = Swift.Never
}
public protocol SkieSwiftFlowProtocol<Element> : _Concurrency.AsyncSequence {
  associatedtype Element
  associatedtype Delegate : SharedCore.Kotlinx_coroutines_coreFlow
}
@_hasMissingDesignatedInitializers final public class SkieSwiftFlow<T> : SharedCore.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> SharedCore.SkieKotlinFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> SharedCore.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = SharedCore.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = SharedCore.SkieKotlinFlow<Swift.AnyObject>
  public typealias Delegate = any SharedCore.Kotlinx_coroutines_coreFlow
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalFlow<T> : SharedCore.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftOptionalFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftOptionalFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> SharedCore.SkieKotlinOptionalFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> SharedCore.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = SharedCore.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = SharedCore.SkieKotlinOptionalFlow<Swift.AnyObject>
  public typealias Delegate = any SharedCore.Kotlinx_coroutines_coreFlow
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftSharedFlow<T> : SharedCore.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var replayCache: [T] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinSharedFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinSharedFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> SharedCore.SkieKotlinSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> SharedCore.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = SharedCore.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = SharedCore.SkieKotlinSharedFlow<Swift.AnyObject>
  public typealias Delegate = any SharedCore.Kotlinx_coroutines_coreSharedFlow
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalSharedFlow<T> : SharedCore.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var replayCache: [T?] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalSharedFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftOptionalSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalSharedFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftOptionalSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> SharedCore.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> SharedCore.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = SharedCore.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = SharedCore.SkieKotlinOptionalSharedFlow<Swift.AnyObject>
  public typealias Delegate = any SharedCore.Kotlinx_coroutines_coreSharedFlow
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableSharedFlow<T> : SharedCore.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var subscriptionCount: SharedCore.SkieSwiftStateFlow<SharedCore.KotlinInt> {
    get
  }
  final public var replayCache: [T] {
    get
  }
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T) async throws
  final public func tryEmit(value: T) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinMutableSharedFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinMutableSharedFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinMutableSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> SharedCore.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> SharedCore.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = SharedCore.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = SharedCore.SkieKotlinMutableSharedFlow<Swift.AnyObject>
  public typealias Delegate = any SharedCore.Kotlinx_coroutines_coreMutableSharedFlow
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableSharedFlow<T> : SharedCore.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var subscriptionCount: SharedCore.SkieSwiftStateFlow<SharedCore.KotlinInt> {
    get
  }
  final public var replayCache: [T?] {
    get
  }
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T?) async throws
  final public func tryEmit(value: T?) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftOptionalMutableSharedFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftOptionalMutableSharedFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> SharedCore.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> SharedCore.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = SharedCore.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = SharedCore.SkieKotlinOptionalMutableSharedFlow<Swift.AnyObject>
  public typealias Delegate = any SharedCore.Kotlinx_coroutines_coreMutableSharedFlow
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftStateFlow<T> : SharedCore.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T {
    get
  }
  final public var replayCache: [T] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinStateFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinStateFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> SharedCore.SkieKotlinStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> SharedCore.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = SharedCore.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = SharedCore.SkieKotlinStateFlow<Swift.AnyObject>
  public typealias Delegate = any SharedCore.Kotlinx_coroutines_coreStateFlow
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalStateFlow<T> : SharedCore.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T? {
    get
  }
  final public var replayCache: [T?] {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalStateFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftOptionalStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalStateFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftOptionalStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> SharedCore.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> SharedCore.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = SharedCore.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = SharedCore.SkieKotlinOptionalStateFlow<Swift.AnyObject>
  public typealias Delegate = any SharedCore.Kotlinx_coroutines_coreStateFlow
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftMutableStateFlow<T> : SharedCore.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T {
    get
    set(value)
  }
  final public var replayCache: [T] {
    get
  }
  final public var subscriptionCount: SharedCore.SkieSwiftStateFlow<SharedCore.KotlinInt> {
    get
  }
  final public func compareAndSet(expect: T, update: T) -> Swift.Bool
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T) async throws
  final public func tryEmit(value: T) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinMutableStateFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinMutableStateFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinMutableStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> SharedCore.SkieKotlinMutableStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> SharedCore.SkieSwiftFlowIterator<T>
  public typealias AsyncIterator = SharedCore.SkieSwiftFlowIterator<T>
  public typealias Element = T
  public typealias _ObjectiveCType = SharedCore.SkieKotlinMutableStateFlow<Swift.AnyObject>
  public typealias Delegate = any SharedCore.Kotlinx_coroutines_coreMutableStateFlow
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SkieSwiftOptionalMutableStateFlow<T> : SharedCore.SkieSwiftFlowProtocol, Swift._ObjectiveCBridgeable {
  final public var value: T? {
    get
    set(value)
  }
  final public var replayCache: [T?] {
    get
  }
  final public var subscriptionCount: SharedCore.SkieSwiftStateFlow<SharedCore.KotlinInt> {
    get
  }
  final public func compareAndSet(expect: T?, update: T?) -> Swift.Bool
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  final public func emit(value: T?) async throws
  final public func tryEmit(value: T?) -> Swift.Bool
  final public func resetReplayCache()
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftOptionalMutableStateFlow<T>?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>, result: inout SharedCore.SkieSwiftOptionalMutableStateFlow<T>?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>?) -> Self
  final public func _bridgeToObjectiveC() -> SharedCore.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  final public func makeAsyncIterator() -> SharedCore.SkieSwiftFlowIterator<T?>
  public typealias AsyncIterator = SharedCore.SkieSwiftFlowIterator<T?>
  public typealias Element = T?
  public typealias _ObjectiveCType = SharedCore.SkieKotlinOptionalMutableStateFlow<Swift.AnyObject>
  public typealias Delegate = any SharedCore.Kotlinx_coroutines_coreMutableStateFlow
  @available(iOS 18.0, tvOS 18.0, watchOS 11.0, visionOS 2.0, macOS 15.0, *)
  @_implements(_Concurrency.AsyncSequence, Failure) public typealias __AsyncSequence_Failure = Swift.Never
  @objc deinit
}
extension SharedCore.Skie.RuntimeKotlin.SkieColdFlowIterator {
  public struct __Suspend<E> where E : AnyObject {
    public let __kotlinObject: SharedCore.SkieColdFlowIterator<E>
    public init(_ __kotlinObject: SharedCore.SkieColdFlowIterator<E>)
  }
}
public func skie<E>(_ kotlinObject: SharedCore.SkieColdFlowIterator<E>) -> SharedCore.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend<E> where E : AnyObject
extension SharedCore.Skie.RuntimeKotlin.SkieColdFlowIterator.__Suspend {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func hasNext() async throws -> SharedCore.KotlinBoolean
}
extension SharedCore.Kotlinx_coroutines_coreFlow {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func collect(collector: any SharedCore.Kotlinx_coroutines_coreFlowCollector) async throws
}
extension SharedCore.Kotlinx_coroutines_coreFlowCollector {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func emit(value: Any?) async throws
}
extension SharedCore.CheckRegistrationEnabledUseCase {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func invoke() async throws -> SharedCore.CheckRegistrationEnabledUseCase.Result
}
extension SharedCore.EnableRegistrationUseCase {
  @available(iOS 13, macOS 10.15, watchOS 6, tvOS 13, *)
  public func invoke() async throws -> SharedCore.EnableRegistrationUseCase.Result
}
public func SkieKotlinFlow<T>(_ flow: SharedCore.SkieSwiftFlow<T>) -> SharedCore.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: SharedCore.SkieSwiftSharedFlow<T>) -> SharedCore.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>) -> SharedCore.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: SharedCore.SkieSwiftStateFlow<T>) -> SharedCore.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinFlow<T> where T : AnyObject
public func SkieKotlinFlow<T>(_ flow: SharedCore.SkieSwiftFlow<T>) -> SharedCore.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: SharedCore.SkieSwiftSharedFlow<T>) -> SharedCore.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>) -> SharedCore.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: SharedCore.SkieSwiftStateFlow<T>) -> SharedCore.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension SharedCore.SkieSwiftFlow where T : AnyObject {
  convenience public init(_ flow: SharedCore.SkieKotlinFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
}
extension SharedCore.SkieSwiftFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: SharedCore.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftOptionalFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftSharedFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftOptionalSharedFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftStateFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T> where T : AnyObject
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftOptionalFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftSharedFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftOptionalSharedFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftStateFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalFlow<T>(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension SharedCore.SkieSwiftOptionalFlow where T : AnyObject {
  convenience public init(_ flow: SharedCore.SkieKotlinFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>)
}
extension SharedCore.SkieSwiftOptionalFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: SharedCore.SkieKotlinFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>)
}
public func SkieKotlinSharedFlow<T>(_ flow: SharedCore.SkieSwiftSharedFlow<T>) -> SharedCore.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>) -> SharedCore.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: SharedCore.SkieSwiftStateFlow<T>) -> SharedCore.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinSharedFlow<T> where T : AnyObject
public func SkieKotlinSharedFlow<T>(_ flow: SharedCore.SkieSwiftSharedFlow<T>) -> SharedCore.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinSharedFlow<T>(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>) -> SharedCore.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinSharedFlow<T>(_ flow: SharedCore.SkieSwiftStateFlow<T>) -> SharedCore.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinSharedFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension SharedCore.SkieSwiftSharedFlow where T : AnyObject {
  convenience public init(_ flow: SharedCore.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
}
extension SharedCore.SkieSwiftSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: SharedCore.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftSharedFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftOptionalSharedFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftStateFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftSharedFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftOptionalSharedFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftStateFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalSharedFlow<T>(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension SharedCore.SkieSwiftOptionalSharedFlow where T : AnyObject {
  convenience public init(_ flow: SharedCore.SkieKotlinSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>)
}
extension SharedCore.SkieSwiftOptionalSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: SharedCore.SkieKotlinSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>)
}
public func SkieKotlinMutableSharedFlow<T>(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>) -> SharedCore.SkieKotlinMutableSharedFlow<T> where T : AnyObject
public func SkieKotlinMutableSharedFlow<T>(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>) -> SharedCore.SkieKotlinMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension SharedCore.SkieSwiftMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: SharedCore.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>)
}
extension SharedCore.SkieSwiftMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: SharedCore.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>)
}
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>) -> SharedCore.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T>) -> SharedCore.SkieKotlinOptionalMutableSharedFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>) -> SharedCore.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalMutableSharedFlow<T>(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T>) -> SharedCore.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension SharedCore.SkieSwiftOptionalMutableSharedFlow where T : AnyObject {
  convenience public init(_ flow: SharedCore.SkieKotlinMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T>)
}
extension SharedCore.SkieSwiftOptionalMutableSharedFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: SharedCore.SkieKotlinMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableSharedFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableSharedFlow<T>)
}
public func SkieKotlinStateFlow<T>(_ flow: SharedCore.SkieSwiftStateFlow<T>) -> SharedCore.SkieKotlinStateFlow<T> where T : AnyObject
public func SkieKotlinStateFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinStateFlow<T> where T : AnyObject
public func SkieKotlinStateFlow<T>(_ flow: SharedCore.SkieSwiftStateFlow<T>) -> SharedCore.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinStateFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension SharedCore.SkieSwiftStateFlow where T : AnyObject {
  convenience public init(_ flow: SharedCore.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
}
extension SharedCore.SkieSwiftStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: SharedCore.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalStateFlow<T>(_ flow: SharedCore.SkieSwiftStateFlow<T>) -> SharedCore.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T>) -> SharedCore.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalStateFlow<T>(_ flow: SharedCore.SkieSwiftStateFlow<T>) -> SharedCore.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalStateFlow<T>(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T>) -> SharedCore.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalStateFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalStateFlow<T>(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension SharedCore.SkieSwiftOptionalStateFlow where T : AnyObject {
  convenience public init(_ flow: SharedCore.SkieKotlinStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>)
}
extension SharedCore.SkieSwiftOptionalStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: SharedCore.SkieKotlinStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>)
}
public func SkieKotlinMutableStateFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinMutableStateFlow<T> where T : AnyObject
public func SkieKotlinMutableStateFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension SharedCore.SkieSwiftMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
}
extension SharedCore.SkieSwiftMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
}
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalMutableStateFlow<T> where T : AnyObject
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
public func SkieKotlinOptionalMutableStateFlow<T>(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>) -> SharedCore.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType> where T : Swift._ObjectiveCBridgeable
extension SharedCore.SkieSwiftOptionalMutableStateFlow where T : AnyObject {
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>)
}
extension SharedCore.SkieSwiftOptionalMutableStateFlow where T : Swift._ObjectiveCBridgeable {
  convenience public init(_ flow: SharedCore.SkieKotlinMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieKotlinOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T._ObjectiveCType>)
  convenience public init(_ flow: SharedCore.SkieSwiftMutableStateFlow<T>)
  convenience public init(_ flow: SharedCore.SkieSwiftOptionalMutableStateFlow<T>)
}
@frozen public enum SuplaEventType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknown
  case controllingTheGatewayLock
  case controllingTheGate
  case controllingTheGarageDoor
  case controllingTheDoorLock
  case controllingTheRollerShutter
  case controllingTheRoofWindow
  case powerOnOff
  case lightOnOff
  case valveOpenClose
  case setBridgeValueFailed
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: SharedCore.__SuplaEventType.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__SuplaEventType, result: inout SharedCore.SuplaEventType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaEventType, result: inout SharedCore.SuplaEventType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaEventType?) -> SharedCore.SuplaEventType
  public func _bridgeToObjectiveC() -> SharedCore.__SuplaEventType
  public typealias _ObjectiveCType = SharedCore.__SuplaEventType
  public typealias Companion = SharedCore.__SuplaEventType.Companion
  public static func == (a: SharedCore.SuplaEventType, b: SharedCore.SuplaEventType) -> Swift.Bool
  public typealias AllCases = [SharedCore.SuplaEventType]
  nonisolated public static var allCases: [SharedCore.SuplaEventType] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.SuplaEventType {
  public func toKotlinEnum() -> SharedCore.__SuplaEventType
}
extension SharedCore.__SuplaEventType {
  public func toSwiftEnum() -> SharedCore.SuplaEventType
}
@frozen public enum SuplaChannelAvailabilityStatus : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case online
  case offline
  case onlineButNotAvailable
  case offlineRemoteWakeupNotSupported
  case firmwareUpdateOngoing
  public var name: Swift.String {
    get
  }
  public var offline: Swift.Bool {
    get
  }
  public var online: Swift.Bool {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var rawValue: Swift.Int32 {
    get
  }
  public static var companion: SharedCore.__SuplaChannelAvailabilityStatus.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__SuplaChannelAvailabilityStatus, result: inout SharedCore.SuplaChannelAvailabilityStatus?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaChannelAvailabilityStatus, result: inout SharedCore.SuplaChannelAvailabilityStatus?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaChannelAvailabilityStatus?) -> SharedCore.SuplaChannelAvailabilityStatus
  public func _bridgeToObjectiveC() -> SharedCore.__SuplaChannelAvailabilityStatus
  public typealias _ObjectiveCType = SharedCore.__SuplaChannelAvailabilityStatus
  public typealias Companion = SharedCore.__SuplaChannelAvailabilityStatus.Companion
  public static func == (a: SharedCore.SuplaChannelAvailabilityStatus, b: SharedCore.SuplaChannelAvailabilityStatus) -> Swift.Bool
  public typealias AllCases = [SharedCore.SuplaChannelAvailabilityStatus]
  nonisolated public static var allCases: [SharedCore.SuplaChannelAvailabilityStatus] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.SuplaChannelAvailabilityStatus {
  public func toKotlinEnum() -> SharedCore.__SuplaChannelAvailabilityStatus
}
extension SharedCore.__SuplaChannelAvailabilityStatus {
  public func toSwiftEnum() -> SharedCore.SuplaChannelAvailabilityStatus
}
@frozen public enum SuplaHvacMode : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknown
  case notSet
  case off
  case heat
  case cool
  case heatCool
  case fanOnly
  case dry
  case cmdTurnOn
  case cmdWeeklySchedule
  case cmdSwitchToManual
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: SharedCore.__SuplaHvacMode.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__SuplaHvacMode, result: inout SharedCore.SuplaHvacMode?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaHvacMode, result: inout SharedCore.SuplaHvacMode?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaHvacMode?) -> SharedCore.SuplaHvacMode
  public func _bridgeToObjectiveC() -> SharedCore.__SuplaHvacMode
  public typealias _ObjectiveCType = SharedCore.__SuplaHvacMode
  public typealias Companion = SharedCore.__SuplaHvacMode.Companion
  public static func == (a: SharedCore.SuplaHvacMode, b: SharedCore.SuplaHvacMode) -> Swift.Bool
  public typealias AllCases = [SharedCore.SuplaHvacMode]
  nonisolated public static var allCases: [SharedCore.SuplaHvacMode] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.SuplaHvacMode {
  public func toKotlinEnum() -> SharedCore.__SuplaHvacMode
}
extension SharedCore.__SuplaHvacMode {
  public func toSwiftEnum() -> SharedCore.SuplaHvacMode
}
@frozen public enum ThermostatSubfunction : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case notSet
  case heat
  case cool
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static var companion: SharedCore.__ThermostatSubfunction.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__ThermostatSubfunction, result: inout SharedCore.ThermostatSubfunction?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__ThermostatSubfunction, result: inout SharedCore.ThermostatSubfunction?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__ThermostatSubfunction?) -> SharedCore.ThermostatSubfunction
  public func _bridgeToObjectiveC() -> SharedCore.__ThermostatSubfunction
  public typealias _ObjectiveCType = SharedCore.__ThermostatSubfunction
  public typealias Companion = SharedCore.__ThermostatSubfunction.Companion
  public static func == (a: SharedCore.ThermostatSubfunction, b: SharedCore.ThermostatSubfunction) -> Swift.Bool
  public typealias AllCases = [SharedCore.ThermostatSubfunction]
  nonisolated public static var allCases: [SharedCore.ThermostatSubfunction] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.ThermostatSubfunction {
  public func toKotlinEnum() -> SharedCore.__ThermostatSubfunction
}
extension SharedCore.__ThermostatSubfunction {
  public func toSwiftEnum() -> SharedCore.ThermostatSubfunction
}
@frozen public enum Icon : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case addWizardError
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__Icon, result: inout SharedCore.Icon?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__Icon, result: inout SharedCore.Icon?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__Icon?) -> SharedCore.Icon
  public func _bridgeToObjectiveC() -> SharedCore.__Icon
  public typealias _ObjectiveCType = SharedCore.__Icon
  public static func == (a: SharedCore.Icon, b: SharedCore.Icon) -> Swift.Bool
  public typealias AllCases = [SharedCore.Icon]
  nonisolated public static var allCases: [SharedCore.Icon] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.Icon {
  public func toKotlinEnum() -> SharedCore.__Icon
}
extension SharedCore.__Icon {
  public func toSwiftEnum() -> SharedCore.Icon
}
@frozen public enum LocalizedStringId : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case generalTurnOn
  case generalTurnOff
  case generalOpen
  case generalClose
  case generalOpenClose
  case generalShut
  case generalReveal
  case generalCollapse
  case generalExpand
  case generalYes
  case generalNo
  case channelCaptionOpenSensorGateway
  case channelCaptionControllingTheGatewayLock
  case channelCaptionOpenSensorGate
  case channelCaptionControllingTheGate
  case channelCaptionOpenSensorGarageDoor
  case channelCaptionControllingTheGarageDoor
  case channelCaptionOpenSensorDoor
  case channelCaptionControllingTheDoorLock
  case channelCaptionOpenSensorRollerShutter
  case channelCaptionOpenSensorRoofWindow
  case channelCaptionControllingTheRollerShutter
  case channelCaptionControllingTheRoofWindow
  case channelCaptionControllingTheFacadeBlind
  case channelCaptionPowerSwitch
  case channelCaptionLightswitch
  case channelCaptionThermometer
  case channelCaptionHumidity
  case channelCaptionHumidityAndTemperature
  case channelCaptionWindSensor
  case channelCaptionPressureSensor
  case channelCaptionRainSensor
  case channelCaptionWeightSensor
  case channelCaptionNoLiquidSensor
  case channelCaptionDimmer
  case channelCaptionRgbLighting
  case channelCaptionDimmerAndRgbLighting
  case channelCaptionDepthSensor
  case channelCaptionDistanceSensor
  case channelCaptionOpeningSensorWindow
  case channelCaptionHotelCardSensor
  case channelCaptionAlarmArmamentSensor
  case channelCaptionMailSensor
  case channelCaptionStaircaseTimer
  case channelCaptionIcGasMeter
  case channelCaptionIcWaterMeter
  case channelCaptionIcHeatMeter
  case channelCaptionThermostatHeatpolHomeplus
  case channelCaptionValve
  case channelCaptionGeneralPurposeMeasurement
  case channelCaptionGeneralPurposeMeter
  case channelCaptionThermostat
  case channelCaptionElectricityMeter
  case channelCaptionDigiglass
  case channelCaptionTerraceAwning
  case channelCaptionProjectorScreen
  case channelCaptionCurtain
  case channelCaptionVerticalBlind
  case channelCaptionRollerGarageDoor
  case channelCaptionPumpSwitch
  case channelCaptionHeatOrColdSourceSwitch
  case channelCaptionUnknown
  case channelCaptionContainer
  case channelCaptionSepticTank
  case channelCaptionWaterTank
  case channelCaptionContainerLevelSensor
  case channelCaptionFloodSensor
  case channelStatusAwaiting
  case channelStatusUpdating
  case channelStatusNotAvailable
  case channelBatteryLevel
  case motorProblem
  case calibrationLost
  case calibrationFailed
  case overcurrentWarning
  case thermostatThermometerError
  case thermostatBatterCoverOpen
  case thermostatClockError
  case thermostatCalibrationError
  case floodSensorActive
  case valveManuallyClosed
  case valveFlooding
  case valveMotorProblem
  case valveSensorOffline
  case containerAlarmLevel
  case containerWarningLevel
  case containerInvalidSensorState
  case containerSoundAlarm
  case deviceRegistrationRequestTimeout
  case enablingRegistrationTimeout
  case addWizardScanTimeout
  case addWizardDeviceNotFound
  case addWizardConnectTimeout
  case addWizardConfigureTimeout
  case addWizardWifiError
  case addWizardResultNotCompatible
  case addWizardResultConnectionError
  case addWizardResultFailed
  case addWizardReconnectTimeout
  case addWizardDeviceTemporarilyLocked
  case addWizardStatePreparing
  case addWizardStateConnecting
  case addWizardStateConfiguring
  case addWizardStateFinishing
  case channelStateUptime
  case lastConnectionResetCauseUnknown
  case lastConnectionResetCauseActivityTimeout
  case lastConnectionResetCauseWifiConnectionLost
  case lastConnectionResetCauseServerConnectionLost
  case resultCodeTemporarilyUnavailable
  case resultCodeClientLimitExceeded
  case resultCodeDeviceDisabled
  case resultCodeAccessIdDisabled
  case resultCodeRegistrationDisabled
  case resultCodeAccessIdNotAssigned
  case resultCodeInactive
  case resultCodeIncorrectEmailOrPassword
  case resultCodeBadCredentials
  case resultCodeUnknownError
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__LocalizedStringId, result: inout SharedCore.LocalizedStringId?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__LocalizedStringId, result: inout SharedCore.LocalizedStringId?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__LocalizedStringId?) -> SharedCore.LocalizedStringId
  public func _bridgeToObjectiveC() -> SharedCore.__LocalizedStringId
  public typealias _ObjectiveCType = SharedCore.__LocalizedStringId
  public static func == (a: SharedCore.LocalizedStringId, b: SharedCore.LocalizedStringId) -> Swift.Bool
  public typealias AllCases = [SharedCore.LocalizedStringId]
  nonisolated public static var allCases: [SharedCore.LocalizedStringId] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.LocalizedStringId {
  public func toKotlinEnum() -> SharedCore.__LocalizedStringId
}
extension SharedCore.__LocalizedStringId {
  public func toSwiftEnum() -> SharedCore.LocalizedStringId
}
@frozen public enum SuplaResultCode : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknown
  case none
  case unsupported
  case `false`
  case `true`
  case temporarilyUnavailable
  case badCredentials
  case locationConflict
  case channelConflict
  case deviceDisabled
  case accessIdDisabled
  case locationDisabled
  case clientDisabled
  case clientLimitExceeded
  case deviceLimitExceeded
  case guidError
  case deviceLocked
  case registrationDisabled
  case accessIdNotAssigned
  case authKeyError
  case noLocationAvailable
  case userConflict
  case unauthorized
  case authorized
  case notAllowed
  case channelNotFound
  case unknownError
  case denyChannelBelongToGroup
  case denyChannelHasSchedule
  case denyChannelIsAssociatedWithScene
  case denyChannelIsAssociatedWithActionTrigger
  case inactive
  case cfgModeRequested
  case actionUnsupported
  case subjectNotFound
  case incorrectParameters
  case clientNotExists
  case countryRejected
  case channelIsOffline
  case notRegistered
  case denyChannelIsAssociatedWithVbt
  case denyChannelIsAssociatedWithPush
  case restartRequested
  case identifyRequested
  case malformedEmail
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: SharedCore.__SuplaResultCode.Companion {
    get
  }
  public func message(isLogin: Swift.Bool) -> any SharedCore.LocalizedString
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__SuplaResultCode, result: inout SharedCore.SuplaResultCode?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaResultCode, result: inout SharedCore.SuplaResultCode?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaResultCode?) -> SharedCore.SuplaResultCode
  public func _bridgeToObjectiveC() -> SharedCore.__SuplaResultCode
  public typealias _ObjectiveCType = SharedCore.__SuplaResultCode
  public typealias Companion = SharedCore.__SuplaResultCode.Companion
  public static func == (a: SharedCore.SuplaResultCode, b: SharedCore.SuplaResultCode) -> Swift.Bool
  public typealias AllCases = [SharedCore.SuplaResultCode]
  nonisolated public static var allCases: [SharedCore.SuplaResultCode] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.SuplaResultCode {
  public func toKotlinEnum() -> SharedCore.__SuplaResultCode
}
extension SharedCore.__SuplaResultCode {
  public func toSwiftEnum() -> SharedCore.SuplaResultCode
}
@frozen public enum SuplaFunction : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknown
  case none
  case controllingTheGatewayLock
  case controllingTheGate
  case controllingTheGarageDoor
  case thermometer
  case humidity
  case humidityAndTemperature
  case openSensorGateway
  case openSensorGate
  case openSensorGarageDoor
  case noLiquidSensor
  case controllingTheDoorLock
  case openSensorDoor
  case controllingTheRollerShutter
  case controllingTheRoofWindow
  case openSensorRollerShutter
  case openSensorRoofWindow
  case powerSwitch
  case lightswitch
  case ring
  case alarm
  case notification
  case dimmer
  case rgbLighting
  case dimmerAndRgbLighting
  case depthSensor
  case distanceSensor
  case openingSensorWindow
  case hotelCardSensor
  case alarmArmamentSensor
  case mailSensor
  case windSensor
  case pressureSensor
  case rainSensor
  case weightSensor
  case weatherStation
  case staircaseTimer
  case electricityMeter
  case icElectricityMeter
  case icGasMeter
  case icWaterMeter
  case icHeatMeter
  case thermostatHeatpolHomeplus
  case hvacThermostat
  case hvacThermostatHeatCool
  case hvacDomesticHotWater
  case valveOpenClose
  case valvePercentage
  case generalPurposeMeasurement
  case generalPurposeMeter
  case digiglassHorizontal
  case digiglassVertical
  case controllingTheFacadeBlind
  case terraceAwning
  case projectorScreen
  case curtain
  case verticalBlind
  case rollerGarageDoor
  case pumpSwitch
  case heatOrColdSourceSwitch
  case container
  case septicTank
  case waterTank
  case containerLevelSensor
  case floodSensor
  public var hasThermostatSubfunction: Swift.Bool {
    get
  }
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: SharedCore.__SuplaFunction.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__SuplaFunction, result: inout SharedCore.SuplaFunction?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaFunction, result: inout SharedCore.SuplaFunction?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaFunction?) -> SharedCore.SuplaFunction
  public func _bridgeToObjectiveC() -> SharedCore.__SuplaFunction
  public typealias _ObjectiveCType = SharedCore.__SuplaFunction
  public typealias Companion = SharedCore.__SuplaFunction.Companion
  public static func == (a: SharedCore.SuplaFunction, b: SharedCore.SuplaFunction) -> Swift.Bool
  public typealias AllCases = [SharedCore.SuplaFunction]
  nonisolated public static var allCases: [SharedCore.SuplaFunction] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.SuplaFunction {
  public func toKotlinEnum() -> SharedCore.__SuplaFunction
}
extension SharedCore.__SuplaFunction {
  public func toSwiftEnum() -> SharedCore.SuplaFunction
}
extension SharedCore.CheckRegistrationEnabledUseCase {
  public typealias Result = SharedCore.__Bridge__CheckRegistrationEnabledUseCase_Result
}
extension SharedCore.__Bridge__CheckRegistrationEnabledUseCase_Result {
  public func toKotlinEnum() -> SharedCore.CheckRegistrationEnabledUseCase.__Result
}
extension SharedCore.CheckRegistrationEnabledUseCase.__Result {
  public func toSwiftEnum() -> SharedCore.CheckRegistrationEnabledUseCase.Result
}
@frozen public enum __Bridge__CheckRegistrationEnabledUseCase_Result : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case enabled
  case disabled
  case timeout
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.CheckRegistrationEnabledUseCase.__Result, result: inout SharedCore.CheckRegistrationEnabledUseCase.Result?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.CheckRegistrationEnabledUseCase.__Result, result: inout SharedCore.CheckRegistrationEnabledUseCase.Result?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.CheckRegistrationEnabledUseCase.__Result?) -> SharedCore.__Bridge__CheckRegistrationEnabledUseCase_Result
  public func _bridgeToObjectiveC() -> SharedCore.CheckRegistrationEnabledUseCase.__Result
  public typealias _ObjectiveCType = SharedCore.CheckRegistrationEnabledUseCase.__Result
  public static func == (a: SharedCore.__Bridge__CheckRegistrationEnabledUseCase_Result, b: SharedCore.__Bridge__CheckRegistrationEnabledUseCase_Result) -> Swift.Bool
  public typealias AllCases = [SharedCore.__Bridge__CheckRegistrationEnabledUseCase_Result]
  nonisolated public static var allCases: [SharedCore.__Bridge__CheckRegistrationEnabledUseCase_Result] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.EnableRegistrationUseCase {
  public typealias Result = SharedCore.__Bridge__EnableRegistrationUseCase_Result
}
extension SharedCore.__Bridge__EnableRegistrationUseCase_Result {
  public func toKotlinEnum() -> SharedCore.EnableRegistrationUseCase.__Result
}
extension SharedCore.EnableRegistrationUseCase.__Result {
  public func toSwiftEnum() -> SharedCore.EnableRegistrationUseCase.Result
}
@frozen public enum __Bridge__EnableRegistrationUseCase_Result : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case success
  case failure
  case timeout
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.EnableRegistrationUseCase.__Result, result: inout SharedCore.EnableRegistrationUseCase.Result?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.EnableRegistrationUseCase.__Result, result: inout SharedCore.EnableRegistrationUseCase.Result?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.EnableRegistrationUseCase.__Result?) -> SharedCore.__Bridge__EnableRegistrationUseCase_Result
  public func _bridgeToObjectiveC() -> SharedCore.EnableRegistrationUseCase.__Result
  public typealias _ObjectiveCType = SharedCore.EnableRegistrationUseCase.__Result
  public static func == (a: SharedCore.__Bridge__EnableRegistrationUseCase_Result, b: SharedCore.__Bridge__EnableRegistrationUseCase_Result) -> Swift.Bool
  public typealias AllCases = [SharedCore.__Bridge__EnableRegistrationUseCase_Result]
  nonisolated public static var allCases: [SharedCore.__Bridge__EnableRegistrationUseCase_Result] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@frozen public enum ChannelRelationType : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case unknown
  case `default`
  case openingSensor
  case partialOpeningSensor
  case meter
  case mainThermometer
  case auxThermometerFloor
  case auxThermometerWater
  case auxThermometerGenericHeater
  case auxThermometerGenericCooler
  case masterThermostat
  case heatOrColdSourceSwitch
  case pumpSwitch
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int16 {
    get
  }
  public static var companion: SharedCore.__ChannelRelationType.Companion {
    get
  }
  public func isAuxThermometer() -> Swift.Bool
  public func isMainThermometer() -> Swift.Bool
  public func isThermometer() -> Swift.Bool
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__ChannelRelationType, result: inout SharedCore.ChannelRelationType?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__ChannelRelationType, result: inout SharedCore.ChannelRelationType?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__ChannelRelationType?) -> SharedCore.ChannelRelationType
  public func _bridgeToObjectiveC() -> SharedCore.__ChannelRelationType
  public typealias _ObjectiveCType = SharedCore.__ChannelRelationType
  public typealias Companion = SharedCore.__ChannelRelationType.Companion
  public static func == (a: SharedCore.ChannelRelationType, b: SharedCore.ChannelRelationType) -> Swift.Bool
  public typealias AllCases = [SharedCore.ChannelRelationType]
  nonisolated public static var allCases: [SharedCore.ChannelRelationType] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.ChannelRelationType {
  public func toKotlinEnum() -> SharedCore.__ChannelRelationType
}
extension SharedCore.__ChannelRelationType {
  public func toSwiftEnum() -> SharedCore.ChannelRelationType
}
@frozen public enum ContainerFlag : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case warningLevel
  case alarmLevel
  case invalidSensorState
  case soundAlarmOn
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: SharedCore.__ContainerFlag.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__ContainerFlag, result: inout SharedCore.ContainerFlag?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__ContainerFlag, result: inout SharedCore.ContainerFlag?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__ContainerFlag?) -> SharedCore.ContainerFlag
  public func _bridgeToObjectiveC() -> SharedCore.__ContainerFlag
  public typealias _ObjectiveCType = SharedCore.__ContainerFlag
  public typealias Companion = SharedCore.__ContainerFlag.Companion
  public static func == (a: SharedCore.ContainerFlag, b: SharedCore.ContainerFlag) -> Swift.Bool
  public typealias AllCases = [SharedCore.ContainerFlag]
  nonisolated public static var allCases: [SharedCore.ContainerFlag] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.ContainerFlag {
  public func toKotlinEnum() -> SharedCore.__ContainerFlag
}
extension SharedCore.__ContainerFlag {
  public func toSwiftEnum() -> SharedCore.ContainerFlag
}
@frozen public enum SuplaShadingSystemFlag : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case tiltIsSet
  case calibrationFailed
  case calibrationLost
  case motorProblem
  case calibrationInProgress
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: SharedCore.__SuplaShadingSystemFlag.Companion {
    get
  }
  public func asChannelIssues() -> SharedCore.ChannelIssueItem?
  public func isIssueFlag() -> Swift.Bool
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__SuplaShadingSystemFlag, result: inout SharedCore.SuplaShadingSystemFlag?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaShadingSystemFlag, result: inout SharedCore.SuplaShadingSystemFlag?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaShadingSystemFlag?) -> SharedCore.SuplaShadingSystemFlag
  public func _bridgeToObjectiveC() -> SharedCore.__SuplaShadingSystemFlag
  public typealias _ObjectiveCType = SharedCore.__SuplaShadingSystemFlag
  public typealias Companion = SharedCore.__SuplaShadingSystemFlag.Companion
  public static func == (a: SharedCore.SuplaShadingSystemFlag, b: SharedCore.SuplaShadingSystemFlag) -> Swift.Bool
  public typealias AllCases = [SharedCore.SuplaShadingSystemFlag]
  nonisolated public static var allCases: [SharedCore.SuplaShadingSystemFlag] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.SuplaShadingSystemFlag {
  public func toKotlinEnum() -> SharedCore.__SuplaShadingSystemFlag
}
extension SharedCore.__SuplaShadingSystemFlag {
  public func toSwiftEnum() -> SharedCore.SuplaShadingSystemFlag
}
@frozen public enum SuplaRelayFlag : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case overcurrentRelayOff
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: SharedCore.__SuplaRelayFlag.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__SuplaRelayFlag, result: inout SharedCore.SuplaRelayFlag?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaRelayFlag, result: inout SharedCore.SuplaRelayFlag?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaRelayFlag?) -> SharedCore.SuplaRelayFlag
  public func _bridgeToObjectiveC() -> SharedCore.__SuplaRelayFlag
  public typealias _ObjectiveCType = SharedCore.__SuplaRelayFlag
  public typealias Companion = SharedCore.__SuplaRelayFlag.Companion
  public static func == (a: SharedCore.SuplaRelayFlag, b: SharedCore.SuplaRelayFlag) -> Swift.Bool
  public typealias AllCases = [SharedCore.SuplaRelayFlag]
  nonisolated public static var allCases: [SharedCore.SuplaRelayFlag] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.SuplaRelayFlag {
  public func toKotlinEnum() -> SharedCore.__SuplaRelayFlag
}
extension SharedCore.__SuplaRelayFlag {
  public func toSwiftEnum() -> SharedCore.SuplaRelayFlag
}
@frozen public enum SuplaThermostatFlag : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case setpointTempMinSet
  case setpointTempMaxSet
  case heating
  case cooling
  case weeklySchedule
  case countdownTimer
  case fanEnabled
  case thermometerError
  case clockError
  case forcedOffBySensor
  case heatOrCool
  case weeklyScheduleTemporalOverride
  case batteryCoverOpen
  case calibrationError
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: SharedCore.__SuplaThermostatFlag.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__SuplaThermostatFlag, result: inout SharedCore.SuplaThermostatFlag?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaThermostatFlag, result: inout SharedCore.SuplaThermostatFlag?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaThermostatFlag?) -> SharedCore.SuplaThermostatFlag
  public func _bridgeToObjectiveC() -> SharedCore.__SuplaThermostatFlag
  public typealias _ObjectiveCType = SharedCore.__SuplaThermostatFlag
  public typealias Companion = SharedCore.__SuplaThermostatFlag.Companion
  public static func == (a: SharedCore.SuplaThermostatFlag, b: SharedCore.SuplaThermostatFlag) -> Swift.Bool
  public typealias AllCases = [SharedCore.SuplaThermostatFlag]
  nonisolated public static var allCases: [SharedCore.SuplaThermostatFlag] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.SuplaThermostatFlag {
  public func toKotlinEnum() -> SharedCore.__SuplaThermostatFlag
}
extension SharedCore.__SuplaThermostatFlag {
  public func toSwiftEnum() -> SharedCore.SuplaThermostatFlag
}
@frozen public enum SuplaValveFlag : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case flooding
  case manuallyClosed
  case motorProblem
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static var companion: SharedCore.__SuplaValveFlag.Companion {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__SuplaValveFlag, result: inout SharedCore.SuplaValveFlag?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaValveFlag, result: inout SharedCore.SuplaValveFlag?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaValveFlag?) -> SharedCore.SuplaValveFlag
  public func _bridgeToObjectiveC() -> SharedCore.__SuplaValveFlag
  public typealias _ObjectiveCType = SharedCore.__SuplaValveFlag
  public typealias Companion = SharedCore.__SuplaValveFlag.Companion
  public static func == (a: SharedCore.SuplaValveFlag, b: SharedCore.SuplaValveFlag) -> Swift.Bool
  public typealias AllCases = [SharedCore.SuplaValveFlag]
  nonisolated public static var allCases: [SharedCore.SuplaValveFlag] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.SuplaValveFlag {
  public func toKotlinEnum() -> SharedCore.__SuplaValveFlag
}
extension SharedCore.__SuplaValveFlag {
  public func toSwiftEnum() -> SharedCore.SuplaValveFlag
}
@frozen public enum SuplaCallConfigCommand : Swift.Hashable, Swift.CaseIterable, Swift._ObjectiveCBridgeable {
  case zwaveGetNodeList
  case recalibrate
  case muteAlarmSound
  public var name: Swift.String {
    get
  }
  public var ordinal: Swift.Int32 {
    get
  }
  public var value: Swift.Int32 {
    get
  }
  public static func _forceBridgeFromObjectiveC(_ source: SharedCore.__SuplaCallConfigCommand, result: inout SharedCore.SuplaCallConfigCommand?)
  public static func _conditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaCallConfigCommand, result: inout SharedCore.SuplaCallConfigCommand?) -> Swift.Bool
  public static func _unconditionallyBridgeFromObjectiveC(_ source: SharedCore.__SuplaCallConfigCommand?) -> SharedCore.SuplaCallConfigCommand
  public func _bridgeToObjectiveC() -> SharedCore.__SuplaCallConfigCommand
  public typealias _ObjectiveCType = SharedCore.__SuplaCallConfigCommand
  public static func == (a: SharedCore.SuplaCallConfigCommand, b: SharedCore.SuplaCallConfigCommand) -> Swift.Bool
  public typealias AllCases = [SharedCore.SuplaCallConfigCommand]
  nonisolated public static var allCases: [SharedCore.SuplaCallConfigCommand] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SharedCore.SuplaCallConfigCommand {
  public func toKotlinEnum() -> SharedCore.__SuplaCallConfigCommand
}
extension SharedCore.__SuplaCallConfigCommand {
  public func toSwiftEnum() -> SharedCore.SuplaCallConfigCommand
}
extension SharedCore.Skie.RuntimeKotlin.Skie_SuspendResult {
  @frozen public enum __Sealed : Swift.Hashable {
    case canceled(SharedCore.Skie_SuspendResult.Canceled)
    case error(SharedCore.Skie_SuspendResult.Error)
    case success(SharedCore.Skie_SuspendResult.Success)
    public static func == (a: SharedCore.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed, b: SharedCore.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed where __Sealed : SharedCore.Skie_SuspendResult
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.RuntimeKotlin.Skie_SuspendResult.__Sealed? where __Sealed : SharedCore.Skie_SuspendResult
extension SharedCore.Skie.supla_android__shared_core.LocalizedString {
  @frozen public enum __Sealed : Swift.Hashable {
    case constant(SharedCore.LocalizedStringConstant)
    case empty(SharedCore.LocalizedStringEmpty)
    case withId(SharedCore.LocalizedStringWithId)
    case withIdAndString(SharedCore.LocalizedStringWithIdAndString)
    case withIdIntStringInt(SharedCore.LocalizedStringWithIdIntStringInt)
    case `else`
    public static func == (a: SharedCore.Skie.supla_android__shared_core.LocalizedString.__Sealed, b: SharedCore.Skie.supla_android__shared_core.LocalizedString.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.supla_android__shared_core.LocalizedString.__Sealed where __Sealed : SharedCore.LocalizedString
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.supla_android__shared_core.LocalizedString.__Sealed? where __Sealed : SharedCore.LocalizedString
extension SharedCore.Skie.supla_android__shared_core.SuplaClientMessage {
  @frozen public enum __Sealed : Swift.Hashable {
    case authorizationResult(SharedCore.SuplaClientMessageAuthorizationResult)
    case callConfigProgressReport(SharedCore.SuplaClientMessageCallConfigProgressReport)
    case callConfigResult(SharedCore.SuplaClientMessageCallConfigResult)
    case channelBasicConfig(SharedCore.SuplaClientMessageChannelBasicConfig)
    case channelCaptionSetResult(SharedCore.SuplaClientMessageChannelCaptionSetResult)
    case channelDataChanged(SharedCore.SuplaClientMessageChannelDataChanged)
    case channelFunctionSetResult(SharedCore.SuplaClientMessageChannelFunctionSetResult)
    case channelState(SharedCore.SuplaClientMessageChannelState)
    case clientRegistered(SharedCore.SuplaClientMessageClientRegistered)
    case clientRegistrationError(SharedCore.SuplaClientMessageClientRegistrationError)
    case event(SharedCore.SuplaClientMessageEvent)
    case groupDataChanged(SharedCore.SuplaClientMessageGroupDataChanged)
    case oAuthToken(SharedCore.SuplaClientMessageOAuthToken)
    case registrationEnabled(SharedCore.SuplaClientMessageRegistrationEnabled)
    case setRegistrationEnabledResult(SharedCore.SuplaClientMessageSetRegistrationEnabledResult)
    case zWaveAddNodeResult(SharedCore.SuplaClientMessageZWaveAddNodeResult)
    case zWaveAssignNodeIdResult(SharedCore.SuplaClientMessageZWaveAssignNodeIdResult)
    case zWaveGetAssignedNodeIdResult(SharedCore.SuplaClientMessageZWaveGetAssignedNodeIdResult)
    case zWaveGetNodeListResult(SharedCore.SuplaClientMessageZWaveGetNodeListResult)
    case zWaveRemoveNodeResult(SharedCore.SuplaClientMessageZWaveRemoveNodeResult)
    case zWaveResetAndClearResult(SharedCore.SuplaClientMessageZWaveResetAndClearResult)
    case zWaveSetWakeUpTimeResult(SharedCore.SuplaClientMessageZWaveSetWakeUpTimeResult)
    case zWaveWakeUpSettingsReport(SharedCore.SuplaClientMessageZWaveWakeUpSettingsReport)
    public static func == (a: SharedCore.Skie.supla_android__shared_core.SuplaClientMessage.__Sealed, b: SharedCore.Skie.supla_android__shared_core.SuplaClientMessage.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.supla_android__shared_core.SuplaClientMessage.__Sealed where __Sealed : SharedCore.SuplaClientMessage
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.supla_android__shared_core.SuplaClientMessage.__Sealed? where __Sealed : SharedCore.SuplaClientMessage
extension SharedCore.Skie.supla_android__shared_core.BaseData {
  @frozen public enum __Sealed : Swift.Hashable {
    case channel(SharedCore.Channel)
    case group(SharedCore.Group)
    case scene(SharedCore.Scene)
    public static func == (a: SharedCore.Skie.supla_android__shared_core.BaseData.__Sealed, b: SharedCore.Skie.supla_android__shared_core.BaseData.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.supla_android__shared_core.BaseData.__Sealed where __Sealed : SharedCore.BaseData
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.supla_android__shared_core.BaseData.__Sealed? where __Sealed : SharedCore.BaseData
extension SharedCore.Skie.supla_android__shared_core.ChannelIssueItem {
  @frozen public enum __Sealed : Swift.Hashable {
    case error(SharedCore.ChannelIssueItem.Error)
    case lowBattery(SharedCore.ChannelIssueItem.LowBattery)
    case soundAlarm(SharedCore.ChannelIssueItem.SoundAlarm)
    case warning(SharedCore.ChannelIssueItem.Warning)
    public static func == (a: SharedCore.Skie.supla_android__shared_core.ChannelIssueItem.__Sealed, b: SharedCore.Skie.supla_android__shared_core.ChannelIssueItem.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.supla_android__shared_core.ChannelIssueItem.__Sealed where __Sealed : SharedCore.ChannelIssueItem
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.supla_android__shared_core.ChannelIssueItem.__Sealed? where __Sealed : SharedCore.ChannelIssueItem
extension SharedCore.Skie.supla_android__shared_core.IssueIcon {
  @frozen public enum __Sealed : Swift.Hashable {
    case battery(SharedCore.IssueIcon.Battery)
    case battery0(SharedCore.IssueIcon.Battery0)
    case battery100(SharedCore.IssueIcon.Battery100)
    case battery25(SharedCore.IssueIcon.Battery25)
    case battery50(SharedCore.IssueIcon.Battery50)
    case battery75(SharedCore.IssueIcon.Battery75)
    case batteryNotUsed(SharedCore.IssueIcon.BatteryNotUsed)
    case error(SharedCore.IssueIcon.Error)
    case sound(SharedCore.IssueIcon.Sound)
    case update(SharedCore.IssueIcon.Update)
    case warning(SharedCore.IssueIcon.Warning)
    public static func == (a: SharedCore.Skie.supla_android__shared_core.IssueIcon.__Sealed, b: SharedCore.Skie.supla_android__shared_core.IssueIcon.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.supla_android__shared_core.IssueIcon.__Sealed where __Sealed : SharedCore.IssueIcon
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.supla_android__shared_core.IssueIcon.__Sealed? where __Sealed : SharedCore.IssueIcon
extension SharedCore.Skie.supla_android__shared_core.AddWizardFinalAction {
  @frozen public enum __Sealed : Swift.Hashable {
    case back(SharedCore.AddWizardFinalActionBack)
    case close(SharedCore.AddWizardFinalActionClose)
    case error(SharedCore.AddWizardFinalActionError)
    case reinitialize(SharedCore.AddWizardFinalActionReinitialize)
    case success(SharedCore.AddWizardFinalActionSuccess)
    public static func == (a: SharedCore.Skie.supla_android__shared_core.AddWizardFinalAction.__Sealed, b: SharedCore.Skie.supla_android__shared_core.AddWizardFinalAction.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.supla_android__shared_core.AddWizardFinalAction.__Sealed where __Sealed : SharedCore.AddWizardFinalAction
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.supla_android__shared_core.AddWizardFinalAction.__Sealed? where __Sealed : SharedCore.AddWizardFinalAction
extension SharedCore.Skie.supla_android__shared_core.EspConfigurationError {
  @frozen public enum __Sealed : Swift.Hashable {
    case combined(SharedCore.EspConfigurationError.Combined)
    case communication(SharedCore.EspConfigurationError.Communication)
    case compatibility(SharedCore.EspConfigurationError.Compatibility)
    case configuration(SharedCore.EspConfigurationError.Configuration)
    case configureTimeout(SharedCore.EspConfigurationError.ConfigureTimeout)
    case connect(SharedCore.EspConfigurationError.Connect)
    case notFound(SharedCore.EspConfigurationError.NotFound)
    case reconnect(SharedCore.EspConfigurationError.Reconnect)
    case registrationCheck(SharedCore.EspConfigurationError.RegistrationCheck)
    case registrationEnable(SharedCore.EspConfigurationError.RegistrationEnable)
    case scan(SharedCore.EspConfigurationError.Scan)
    case temporarilyLocked(SharedCore.EspConfigurationError.TemporarilyLocked)
    case wifi(SharedCore.EspConfigurationError.Wifi)
    public static func == (a: SharedCore.Skie.supla_android__shared_core.EspConfigurationError.__Sealed, b: SharedCore.Skie.supla_android__shared_core.EspConfigurationError.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.supla_android__shared_core.EspConfigurationError.__Sealed where __Sealed : SharedCore.EspConfigurationError
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.supla_android__shared_core.EspConfigurationError.__Sealed? where __Sealed : SharedCore.EspConfigurationError
extension SharedCore.Skie.supla_android__shared_core.EspConfigurationEvent {
  @frozen public enum __Sealed : Swift.Hashable {
    case authorized(SharedCore.EspConfigurationEventAuthorized)
    case back(SharedCore.EspConfigurationEventBack)
    case cancel(SharedCore.EspConfigurationEventCancel)
    case canceled(SharedCore.EspConfigurationEventCanceled)
    case close(SharedCore.EspConfigurationEventClose)
    case credentialsNeeded(SharedCore.EspConfigurationEventCredentialsNeeded)
    case espConfigurationFailure(SharedCore.EspConfigurationEventEspConfigurationFailure)
    case espConfigured(SharedCore.EspConfigurationEventEspConfigured)
    case multipleNetworksFound(SharedCore.EspConfigurationEventMultipleNetworksFound)
    case networkConnected(SharedCore.EspConfigurationEventNetworkConnected)
    case networkConnectionFailure(SharedCore.EspConfigurationEventNetworkConnectionFailure)
    case networkFound(SharedCore.EspConfigurationEventNetworkFound)
    case networkNotFound(SharedCore.EspConfigurationEventNetworkNotFound)
    case networkScanDisabled(SharedCore.EspConfigurationEventNetworkScanDisabled)
    case passwordProvided(SharedCore.EspConfigurationEventPasswordProvided)
    case reconnectTimeout(SharedCore.EspConfigurationEventReconnectTimeout)
    case reconnected(SharedCore.EspConfigurationEventReconnected)
    case registrationActivated(SharedCore.EspConfigurationEventRegistrationActivated)
    case registrationDisabled(SharedCore.EspConfigurationEventRegistrationDisabled)
    case registrationEnabled(SharedCore.EspConfigurationEventRegistrationEnabled)
    case registrationNotActivated(SharedCore.EspConfigurationEventRegistrationNotActivated)
    case registrationUnknown(SharedCore.EspConfigurationEventRegistrationUnknown)
    case setupNeeded(SharedCore.EspConfigurationEventSetupNeeded)
    case start(SharedCore.EspConfigurationEventStart)
    public static func == (a: SharedCore.Skie.supla_android__shared_core.EspConfigurationEvent.__Sealed, b: SharedCore.Skie.supla_android__shared_core.EspConfigurationEvent.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.supla_android__shared_core.EspConfigurationEvent.__Sealed where __Sealed : SharedCore.EspConfigurationEvent
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.supla_android__shared_core.EspConfigurationEvent.__Sealed? where __Sealed : SharedCore.EspConfigurationEvent
extension SharedCore.Skie.supla_android__shared_core.EspConfigurationState {
  @frozen public enum __Sealed : Swift.Hashable {
    case activatingRegistration(SharedCore.ActivatingRegistration)
    case authorizing(SharedCore.Authorizing)
    case canceled(SharedCore.Canceled)
    case canceling(SharedCore.Canceling)
    case changingNetwork(SharedCore.ChangingNetwork)
    case checkingRegistration(SharedCore.CheckingRegistration)
    case configurationFailure(SharedCore.ConfigurationFailure)
    case configuringEsp(SharedCore.ConfiguringEsp)
    case configuringPassword(SharedCore.ConfiguringPassword)
    case finished(SharedCore.Finished)
    case idle(SharedCore.Idle)
    case networkSearch(SharedCore.NetworkSearch)
    case providingPassword(SharedCore.ProvidingPassword)
    case reconnecting(SharedCore.Reconnecting)
    public static func == (a: SharedCore.Skie.supla_android__shared_core.EspConfigurationState.__Sealed, b: SharedCore.Skie.supla_android__shared_core.EspConfigurationState.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.supla_android__shared_core.EspConfigurationState.__Sealed where __Sealed : SharedCore.EspConfigurationState
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.supla_android__shared_core.EspConfigurationState.__Sealed? where __Sealed : SharedCore.EspConfigurationState
extension SharedCore.Skie.supla_android__shared_core.ChannelDto {
  @frozen public enum __Sealed : Swift.Hashable {
    case defaultChannelDto(SharedCore.DefaultChannelDto)
    case electricityChannelDto(SharedCore.ElectricityChannelDto)
    public static func == (a: SharedCore.Skie.supla_android__shared_core.ChannelDto.__Sealed, b: SharedCore.Skie.supla_android__shared_core.ChannelDto.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.supla_android__shared_core.ChannelDto.__Sealed where __Sealed : SharedCore.ChannelDto
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.supla_android__shared_core.ChannelDto.__Sealed? where __Sealed : SharedCore.ChannelDto
extension SharedCore.Skie.KotlinxSerializationCore.SerialKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case polymorphicKind(SharedCore.Kotlinx_serialization_corePolymorphicKind)
    case primitiveKind(SharedCore.Kotlinx_serialization_corePrimitiveKind)
    case cONTEXTUAL(SharedCore.Kotlinx_serialization_coreSerialKind.CONTEXTUAL)
    case eNUM(SharedCore.Kotlinx_serialization_coreSerialKind.ENUM)
    case structureKind(SharedCore.Kotlinx_serialization_coreStructureKind)
    public static func == (a: SharedCore.Skie.KotlinxSerializationCore.SerialKind.__Sealed, b: SharedCore.Skie.KotlinxSerializationCore.SerialKind.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.KotlinxSerializationCore.SerialKind.__Sealed where __Sealed : SharedCore.Kotlinx_serialization_coreSerialKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.KotlinxSerializationCore.SerialKind.__Sealed? where __Sealed : SharedCore.Kotlinx_serialization_coreSerialKind
extension SharedCore.Skie.KotlinxSerializationCore.SerializersModule {
  @frozen public enum __Sealed : Swift.Hashable {
    case `else`
    public static func == (a: SharedCore.Skie.KotlinxSerializationCore.SerializersModule.__Sealed, b: SharedCore.Skie.KotlinxSerializationCore.SerializersModule.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.KotlinxSerializationCore.SerializersModule.__Sealed where __Sealed : SharedCore.Kotlinx_serialization_coreSerializersModule
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.KotlinxSerializationCore.SerializersModule.__Sealed? where __Sealed : SharedCore.Kotlinx_serialization_coreSerializersModule
extension SharedCore.Skie.KotlinxSerializationCore.PolymorphicKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case oPEN(SharedCore.Kotlinx_serialization_corePolymorphicKind.OPEN)
    case sEALED(SharedCore.Kotlinx_serialization_corePolymorphicKind.SEALED)
    public static func == (a: SharedCore.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed, b: SharedCore.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed where __Sealed : SharedCore.Kotlinx_serialization_corePolymorphicKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.KotlinxSerializationCore.PolymorphicKind.__Sealed? where __Sealed : SharedCore.Kotlinx_serialization_corePolymorphicKind
extension SharedCore.Skie.KotlinxSerializationCore.PrimitiveKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case bOOLEAN(SharedCore.Kotlinx_serialization_corePrimitiveKind.BOOLEAN)
    case bYTE(SharedCore.Kotlinx_serialization_corePrimitiveKind.BYTE)
    case cHAR(SharedCore.Kotlinx_serialization_corePrimitiveKind.CHAR)
    case dOUBLE(SharedCore.Kotlinx_serialization_corePrimitiveKind.DOUBLE)
    case fLOAT(SharedCore.Kotlinx_serialization_corePrimitiveKind.FLOAT)
    case iNT(SharedCore.Kotlinx_serialization_corePrimitiveKind.INT)
    case lONG(SharedCore.Kotlinx_serialization_corePrimitiveKind.LONG)
    case sHORT(SharedCore.Kotlinx_serialization_corePrimitiveKind.SHORT)
    case sTRING(SharedCore.Kotlinx_serialization_corePrimitiveKind.STRING)
    public static func == (a: SharedCore.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed, b: SharedCore.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed where __Sealed : SharedCore.Kotlinx_serialization_corePrimitiveKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.KotlinxSerializationCore.PrimitiveKind.__Sealed? where __Sealed : SharedCore.Kotlinx_serialization_corePrimitiveKind
extension SharedCore.Skie.KotlinxSerializationCore.StructureKind {
  @frozen public enum __Sealed : Swift.Hashable {
    case cLASS(SharedCore.Kotlinx_serialization_coreStructureKind.CLASS)
    case lIST(SharedCore.Kotlinx_serialization_coreStructureKind.LIST)
    case mAP(SharedCore.Kotlinx_serialization_coreStructureKind.MAP)
    case oBJECT(SharedCore.Kotlinx_serialization_coreStructureKind.OBJECT)
    public static func == (a: SharedCore.Skie.KotlinxSerializationCore.StructureKind.__Sealed, b: SharedCore.Skie.KotlinxSerializationCore.StructureKind.__Sealed) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public func onEnum<__Sealed>(of sealed: __Sealed) -> SharedCore.Skie.KotlinxSerializationCore.StructureKind.__Sealed where __Sealed : SharedCore.Kotlinx_serialization_coreStructureKind
@_disfavoredOverload public func onEnum<__Sealed>(of sealed: __Sealed?) -> SharedCore.Skie.KotlinxSerializationCore.StructureKind.__Sealed? where __Sealed : SharedCore.Kotlinx_serialization_coreStructureKind
extension Swift.Bool {
  public var localizedString: any SharedCore.LocalizedString {
    get
  }
  public func ifFalse(value: Any?) -> Any?
  public func ifTrue(value: Any?) -> Any?
  public func ifTrue(valueProvider: @escaping () -> Any?) -> Any?
}
public func ifTrue(value: Swift.Bool, callback: @escaping () -> Swift.Void)
extension Swift.Int32 {
  public var ipV4String: Swift.String {
    get
  }
  public func suplaFunction() -> SharedCore.SuplaFunction
}
extension Swift.Int16 {
  public func fromSuplaTemperature() -> Swift.Float
}
extension Swift.String {
  public func localized() -> any SharedCore.LocalizedString
}
public func localizedString(id: SharedCore.LocalizedStringId?) -> any SharedCore.LocalizedString
public func localizedString(id: SharedCore.LocalizedStringId, arg1: Any, arg2: Any, arg3: Any, arg4: Any) -> any SharedCore.LocalizedString
public func localizedString(id: SharedCore.LocalizedStringId, arg1: Swift.Int32, arg2: any SharedCore.LocalizedString, arg3: Swift.Int32) -> any SharedCore.LocalizedString
extension SharedCore.SuplaEventType : Swift.Sendable {}
extension SharedCore.SuplaEventType : Swift.BitwiseCopyable {}
extension SharedCore.SuplaChannelAvailabilityStatus : Swift.Sendable {}
extension SharedCore.SuplaChannelAvailabilityStatus : Swift.BitwiseCopyable {}
extension SharedCore.SuplaHvacMode : Swift.Sendable {}
extension SharedCore.SuplaHvacMode : Swift.BitwiseCopyable {}
extension SharedCore.ThermostatSubfunction : Swift.Sendable {}
extension SharedCore.ThermostatSubfunction : Swift.BitwiseCopyable {}
extension SharedCore.Icon : Swift.Sendable {}
extension SharedCore.Icon : Swift.BitwiseCopyable {}
extension SharedCore.LocalizedStringId : Swift.Sendable {}
extension SharedCore.LocalizedStringId : Swift.BitwiseCopyable {}
extension SharedCore.SuplaResultCode : Swift.Sendable {}
extension SharedCore.SuplaResultCode : Swift.BitwiseCopyable {}
extension SharedCore.SuplaFunction : Swift.Sendable {}
extension SharedCore.SuplaFunction : Swift.BitwiseCopyable {}
extension SharedCore.__Bridge__CheckRegistrationEnabledUseCase_Result : Swift.Sendable {}
extension SharedCore.__Bridge__CheckRegistrationEnabledUseCase_Result : Swift.BitwiseCopyable {}
extension SharedCore.__Bridge__EnableRegistrationUseCase_Result : Swift.Sendable {}
extension SharedCore.__Bridge__EnableRegistrationUseCase_Result : Swift.BitwiseCopyable {}
extension SharedCore.ChannelRelationType : Swift.Sendable {}
extension SharedCore.ChannelRelationType : Swift.BitwiseCopyable {}
extension SharedCore.ContainerFlag : Swift.Sendable {}
extension SharedCore.ContainerFlag : Swift.BitwiseCopyable {}
extension SharedCore.SuplaShadingSystemFlag : Swift.Sendable {}
extension SharedCore.SuplaShadingSystemFlag : Swift.BitwiseCopyable {}
extension SharedCore.SuplaRelayFlag : Swift.Sendable {}
extension SharedCore.SuplaRelayFlag : Swift.BitwiseCopyable {}
extension SharedCore.SuplaThermostatFlag : Swift.Sendable {}
extension SharedCore.SuplaThermostatFlag : Swift.BitwiseCopyable {}
extension SharedCore.SuplaValveFlag : Swift.Sendable {}
extension SharedCore.SuplaValveFlag : Swift.BitwiseCopyable {}
extension SharedCore.SuplaCallConfigCommand : Swift.Sendable {}
extension SharedCore.SuplaCallConfigCommand : Swift.BitwiseCopyable {}
extension SharedCore.Skie.KotlinxSerializationCore.SerializersModule.__Sealed : Swift.Sendable {}
extension SharedCore.Skie.KotlinxSerializationCore.SerializersModule.__Sealed : Swift.BitwiseCopyable {}
